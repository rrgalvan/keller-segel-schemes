verbosity=0;
include "getARGV.idp"

// Mesh and finite element spaces
int n = getARGV("-n", 40); // Read argument from terminal, default value: n=40
mesh Th = square(n, n, [3*x-1.5, 3*y-1.5]);

load "iovtk"

fespace Vh(Th,P1);
Vh u, u0, bu; // Solution at t_{n+1}, t_n, test function.
Vh v, v0, bv; // solution at t_{n+1}, t_n, test function.

macro grad(u) [ dx(u), dy(u) ] // end of macro
  ; // para emacs

// time parameters

real T0 = 0; // Initial time
real T1 = getARGV("-T", 1e-4); // Read final time (default: 1e-4)
int niter=getARGV("-niter", 20); // Read number of time iterations (default: 20)
real k = (T1-T0)/niter; // Define time step
real t; // Current time

// Keller-Segel data

real k1=1;  // Non linear term
real k2=1;  // grad(v)
real k3=1;  // - v
real k4=1;  // + u

// Function defined as "bubble" in unit disk, 0 outside unit disk
func initialU = (1-x^2-y^2)*(x^2+y^2<1);
func initialV = (1-x^2-y^2)*(x^2+y^2<1);

// Exact solution: u=v=(t+1)*bubble
func real uExact(real x, real y, real t) { return exp(t)*initialU; }
func real vExact(real x, real y, real t) { return exp(t)*initialV; }
// x,y derivatives of exact solution (for computing H1 norms)
func real dxUExact(real x, real y, real t) { return -2*x*exp(t)*(x^2+y^2<1); }
func real dyUExact(real x, real y, real t) { return -2*y*exp(t)*(x^2+y^2<1); }
func real dxVExact(real x, real y, real t) { return -2*x*exp(t)*(x^2+y^2<1); }
func real dyVExact(real x, real y, real t) { return -2*y*exp(t)*(x^2+y^2<1); }

// Right hand side, fu, such that u_t -Delta u + div(u grad(v))  = fu
func real fu(real x, real y, real t) {
  real xx = x*x, yy=y*y, et=exp(t);
  if(xx*yy<1) {
    real dtMinusDelta = et*(5-xx-yy);
    real divuGradv = 4*et*et * (2*xx + 2*yy - 1);
    return (dtMinusDelta + divuGradv);
  }
  else return 0;
}
// Right hand side, fv, such that v_t -Delta v + v -u  = fv
func real fv(real x, real y, real t) {
  real xx = x*x, yy=y*y;
  if(xx*yy<1) {
    real dtMinusDelta = exp(t)*(5-xx-yy);
    return dtMinusDelta;
  }
  else return 0;
}

//{ Variables for storing errors -------------------------------------------------
real uL2error2; // || uExact - u_h ||^2_L2
real uH1error2; // || uExact - u_h ||^2_H1
real vL2error2; // || vExact - v_h ||^2_L2
real vH1error2; // || vExact - v_h ||^2_H1
real uL2L2error2=0; // \int_0^T uL2error2 dt
real uL2H1error2=0; // \int_0^T uH1error2 dt
real vL2L2error2=0; // \int_0^T vL2error2 dt
real vL2H1error2=0; // \int_0^T vH1error2 dt
//} -------------------------------------------------- end vectors

u0 = initialU;
v0 = initialV;

plot(v0, value=1, wait=1);

// Variational problem

problem KellerSegel( [u,v], [bu,bv] ) =
  int2d(Th)( u*bu/k + grad(u)'*grad(bu) - k1*u*grad(v0)'*grad(bu) )
  + int2d(Th)( v*bv/k + k2*grad(v)'*grad(bv) + k3*v*bv - k4*u*bv )
  - int2d(Th)( u0*bu/k + fu(x,y,t)*bu )
  - int2d(Th)( v0*bv/k + fv(x,y,t)*bv );

problem KellerSegelGiuseppe( [u,v], [bu,bv] ) =
  int2d(Th)( u*bu/k + grad(u)'*grad(bu) )
  + int2d(Th)( v*bv/k + k2*grad(v)'*grad(bv) )
  - int2d(Th)( u0*bu/k + k1*u0*grad(v0)'*grad(bu) + fu(x,y,t)*bu )
  - int2d(Th)( v0*bv/k - k3*v0*bv + k4*u0*bv + fv(x,y,t)*bv );

problem KellerSegelU(u, bu) =
  int2d(Th)( u*bu/k + grad(u)'*grad(bu)  )
  - int2d(Th)( u0*bu/k + k1*u0*grad(v0)'*grad(bu) + fu(x,y,t)*bu );

problem KellerSegelV(v, bv) =
  int2d(Th)( v*bv/k + k2*grad(v)'*grad(bv) )
  - int2d(Th)( v0*bv/k - k3*v0*bv + k4*u0*bv + fv(x,y,t)*bv);

// Time loop

for (int iter=1; iter<=niter; iter++) {
  t = iter*k;
  cout << "Iter " << iter << ", t=" << t << endl;

  // KellerSegel; // Solve system
  KellerSegelU; // Solve system
  KellerSegelV; // Solve system

  u0 = u;  // For next iteration
  v0 = v;  // For next iteration

  // plot([vx,vy], value=1, fill=0, dim=2, cmm="iter " + iter);
  // savevtk("keller-segel-"+iter+".vtk", Th, u, v, dataname="u v"); // saves vtk
  plot(u, value=1, fill=1, dim=3, cmm="iter " + iter);

  // Compute errors
  uL2error2 = int2d(Th)( (u-uExact(x,y,t))^2 );
  uH1error2 = int2d(Th)( (dx(u)-dxUExact(x,y,t))^2 + (dy(u)-dyUExact(x,y,t))^2 );
  vL2error2 = int2d(Th)( (v-vExact(x,y,t))^2 );
  vH1error2 = int2d(Th)( (dx(v)-dxVExact(x,y,t))^2 + (dy(v)-dyVExact(x,y,t))^2 );

  cout << "  u errors L2/H1: " << sqrt(uL2error2) << "/" << sqrt(uH1error2) << endl;
  cout << "  v errors L2/H1: " << sqrt(vL2error2) << "/" << sqrt(vH1error2) << endl;

  uL2L2error2 += k*uL2error2; // Numerical approximation of \int_0^T uL2error2 dt
  uL2H1error2 += k*uH1error2; // Numerical approximation of \int_0^T uH1error2 dt
  vL2L2error2 += k*vL2error2; // Numerical approximation of \int_0^T vL2error2 dt
  vL2H1error2 += k*vH1error2; // Numerical approximation of \int_0^T vH1error2 dt

 } // End of time loop

cout << endl << "Data: k=" << k << " (niter=" << niter
  << "), h=" << Th.hmax << " (n=" << n << ")" << endl;
cout << "Global u errors L2(L2)/L2(H1): " << sqrt(uL2L2error2) << "/" << sqrt(uL2H1error2) << endl;
cout << "Global v errors L2(L2)/L2(H1): " << sqrt(vL2L2error2) << "/" << sqrt(vL2H1error2) << endl;
